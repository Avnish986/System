
public class LRU {
	LinkedHashSet<Integer> list;
	int MAXSIZE;
	static int faults;

	public LRU(int size) {
		this.MAXSIZE = size;
		this.list = new LinkedHashSet<>();
	}

	public void faultHandle(int page) {
		if(list.size() == MAXSIZE) {
			int first = list.iterator().next();
			list.remove(first);
			
		}
		list.add(page);
		faults++;
	}

	public void refer(int page) {
		if(list.contains(page)) {
			shuffle(page);
		} else {
			faultHandle(page);
		}
	}

	public void shuffle(int page) {
		list.remove(page);
		list.add(page);
	}
}


*********************************************************************************************
public interface IStorage<Key, Value> {
	public void addKey(Key key, Value, value);
	public Value getValue(Key key);
	public void removeKey(Key key);
}

public class HashMapStorage<Key, Value> implments IStorage<Key, Value>{
	Map<Key, Value> mp;
    private final Integer capacity;

    public HashMapStorage(Integer capacity) {
        this.capacity = capacity;
        mp = new HashMap<>();
    }

	@Override
	public void addKey(Key key, Value, value) {
		if(isFull()) {
			//throw error
		}
		mp.put(key, value);
	}

	@Override
	public Value getValue(Key key) {
		if(!mp.contains(key)) {
			//throw error
		}
		return mp.get(key);
	}

	@Override
	public void removeKey(Key key) {
		if(!mp.contains(key)) {
			//throw error
		}
		return mp.remove(key);
	}
} 

public interface IEvictionPolicy<Key> {
	public void keyAccessed(Key key);
	public Key evictKey();
}


public class LRUEvictionPolicy<Key> implements IEvictionPolicy<Key> {
	LinkedHashSet<Key> list;
	static int cacheMiss = 0;

	public class LRUEvictionPolicy() {
		this.list = new LinkedHashSet<>();
	}

	@Override
	public void keyAccessed(Key key) {
		if(list.contains(key)) {
			list.remove(key);
			list.add(key);
		} else {
			list.add(key);
		}
	}

	@Override
	public Key evictKey() {
		if(list == null || list.size() == 0 ) {
			return null;
		}
		Key first = list.iterator().next();
		list.remove(first);
		return first;
	}
}

public class Cache<Key, Value> {
	private EvictionPolicy<Key> evictionPolicy;
	private StoragePolicy<Key, Value> storagePolicy;

	public Cache(EvictionPolicy<Key> evictionPolicy, Storage<Key, Value> storage) {
		this.evictionPolicy = evictionPolicy;
		this.storagePolicy = storagePolicy;
	}

	public void put(Key key, Value value) {
		try {
			this.storagePolicy.add(key, value);
			this.evictionPolicy.keyAccessed(key);
		} catch(FullException ex) {
			Key toRemoved = this.evictionPolicy.evictKey();
			if(key == null) {
				throw new RunTimeException();
			}
			this.storagePolicy.removeKey(toRemoved);
			put(key, value);
		}
	}

	public Value get(Key key) {
		try {
			Value value = this.storagePolicy.getValue(key);
			this.evictionPolicy.keyAccessed(key);
			return value;
		} catch(NotFoundException ex) {
			return null;
		}
	}
}

*********************************************************************************************

private Entry<Key, Value> buckets[];
private int capacity = 16;

public class Entry<Key, Value> {
	Entry<Key, Value> next;
	Key k;
	Value v;

	public Entry(Key key, Value value) {
		this.next = null;
		this.key = key;
		this.value = value;
	}

	public void put(Key key, Value value) {
		int idx = key.getHashCode() % bucket.length();
		Entry<Key, Value> entry = buckets[idx];
		if(entry != null) {
			boolean done = false;
			while(!done) {
				if(key.equals(entry.getKey())) {
					entry.setvalue(value);
					done = true;
				} else if(entry.getNext() == null) {
					entry.setNext(new Entry<Key, value>(key, value));
					done = true;
				}
				entry = entry.getNext();
			}
		} else {
			buckets[idx] = new Entry<Key, value>(key, value);
		}
	}

	public Value getValue(Key key) {
		int idx = key.getHashCode() % bucket.length();
		Entry<Key, Value> entry = buckets[idx];
		while(!entry && !key.equals(entry.getKey())) {
			entry = entry.getNext();
		}

		if(entry != null) {
			return entry.getValue();
		} 
		return null;
	}
}


*********************************************************************************************
public class Recordings {
	public enum RECORDING_VERSIONS{
		v1, v2
	}
	private RECORDING_VERSIONS version;
    private String title;
    private String composer;
    private String duration;
    private String artist;
    private String lyrics;
}

public class Validator {

    private boolean isBlankOrNull(String str){
        return str == null || str == "";
    }

    public List<String> validateRecordings(Recording recording){

        if (recording == null){
            return Arrays.asList("Recording was null");
        }

        List<String> errors = new ArrayList<String>();

        if (Recording.RECORDING_VERSIONS.v1.equals(recording.getVersion())){
            // DO version one rules
            if(isBlankOrNull(recording.getTitle())){
                errors.add("Recording title is blank or null");
            }

            if(isBlankOrNull(recording.getArtist())){
                errors.add("Recording artist is blank or null");
            }
        }else if (Recording.RECORDING_VERSIONS.v2.equals(recording.getVersion())){
            // DO version two rules
            if(isBlankOrNull(recording.getTitle())){
                errors.add("Recording title is blank or null");
            }

            if(isBlankOrNull(recording.getArtist())){
                errors.add("Recording artist is blank or null");
            }
            if(isBlankOrNull(recording.getComposer())){
                errors.add("Recording composer is blank or null");
            }
        }else {
            throw new RuntimeException("Unsupported version type " + recording.getVersion());
        }
        return errors;
    }
}

*********************************************************************************************

public interface IRule {

    public boolean shouldRun(Recording recording);
    public List<String> runRule(Recording recording);

}

public class VersionOneRules implements IRule {

    public boolean shouldRun(Recording recording) {
        return Recording.RECORDING_VERSIONS.v1.equals(recording.getVersion());
    }

    public List<String> runRule(Recording recording) {
        List<String> errors = new ArrayList<String>();
        // DO version one rules
        if(RulesUtilities.isBlankOrNull(recording.getTitle())){
            errors.add("Recording title is blank or null");
        }

        if(RulesUtilities.isBlankOrNull(recording.getArtist())){
            errors.add("Recording artist is blank or null");
        }
        return errors;
    }
}

public class Validator {

    private final List<IRule> rules;
    public Validator(){
        rules = Collections.unmodifiableList(Arrays.asList(new VersionOneRules(), new VersionTwoRules()));
    }

    public List<String> validateRecordings(Recording recording){
        if (recording == null){
            return Arrays.asList("Recording is null");
        }

        List<String> errors = new ArrayList<String>();
        for ( IRule rule : rules){
            if(rule.shouldRun(recording)){
                errors.addAll(rule.runRule(recording));
            }
        }
        return errors;
    }
}